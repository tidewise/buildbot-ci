SLAVE_TO_MASTER_FQDN = "0.tcp.ngrok.io:17204"

import os
import json
import rock
import dashboard

from buildbot.plugins import *

this_dir = os.path.dirname(os.path.realpath(__file__))
with open(os.path.join(this_dir, 'tf', 'info.json')) as f:
    info = json.loads(f.read().strip())

k8s_config = util.KubeHardcodedConfig(
    master_url=info['k8s_url'],
    bearerToken=util.Secret('k8s-sa-token'),
    verify='tf/k8s-ca-certificate')

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['secretsProviders'] = [
    secrets.SecretInAFile(dirname="tf")
]

####### WORKERS
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    rock.ImportCacheWorker('import-cache',
        image="gcr.io/{0}/buildbot-worker".format(info['project']),
        kube_config=k8s_config,
        masterFQDN=SLAVE_TO_MASTER_FQDN),
    rock.BuildCacheWorker('build-cache',
        image="gcr.io/{0}/buildbot-worker".format(info['project']),
        kube_config=k8s_config,
        masterFQDN=SLAVE_TO_MASTER_FQDN),
    rock.BuildWorker('build',
        image="gcr.io/{0}/buildbot-worker".format(info['project']),
        kube_config=k8s_config,
        masterFQDN=SLAVE_TO_MASTER_FQDN)
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.
c['change_source'] = []

####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['builders'] = []

####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

build_cache_clean_factory = util.BuildFactory()
rock.CleanBuildCache(build_cache_clean_factory)

c['schedulers'].append(
    schedulers.ForceScheduler(
        name="clean-build-cache-force",
        builderNames=["build-cache-cleaner"])
)

c['builders'].append(
    util.BuilderConfig(name="build-cache-cleaner",
      workernames=["build-cache"],
      factory=build_cache_clean_factory)
)

### rock-core

rock.StandardSetup(c, "rock-core", "https://github.com/rock-core/buildconf")
c['schedulers'].append(
    schedulers.ForceScheduler(
        name="cache-force",
        builderNames=["rock-core-import-cache"])
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name="build-force",
        builderNames=["rock-core-build"])
)

####### PROJECT IDENTITY
# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Buildbot for Rock"
c['titleURL'] = ""

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8666/"

# minimalistic config to activate new web UI
# we're not using the default port so that it would not accidentally conflict
# with any development instances of buildbot on developer machines
c['www'] = dict(port=8666,
                change_hook_dialects={'base': True},
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
                ui_default_config={'Builders.buildFetchLimit': 201})

c['buildbotNetUsageData'] = None

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}

# Here we assume c['www']['plugins'] has already be created earlier.
# Please see the web server documentation to understand how to configure
# the other parts.
c['www']['plugins']['wsgi_dashboards'] = [  # This is a list of dashboards, you can create several
    {
        'name': 'autoproj',  # as used in URLs
        'caption': 'Autoproj',  # Title displayed in the UI'
        'app': dashboard.Create('Autoproj'),
        # priority of the dashboard in the left menu (lower is higher in the
        # menu)
        'order': 5,
        # available icon list can be found at http://fontawesome.io/icons/
        'icon': 'area-chart'
    }
]
